---
- name: Deploy Mattermost
  hosts: localhost
  become: true
  vars:
    mattermost_version: latest
    mattermost_data_dir: /opt/mattermost/data
    mattermost_config_dir: /opt/mattermost/config
    mattermost_logs_dir: /opt/mattermost/logs
    mattermost_plugins_dir: /opt/mattermost/plugins
    mattermost_client_plugins_dir: /opt/mattermost/client/plugins
    mattermost_bleve_indexes_dir: /opt/mattermost/bleve-indexes
    postgres_db: mattermost
    postgres_user: mmadmin
    postgres_password: mmansible
    postgres_data_dir: /opt/mattermost/postgres
    mm_admin_username: admin
    mm_admin_password: ansible123!
    mm_admin_email: admin@example.com
    mm_team_name: primary
    mm_channel_name: ansible
    mm_site_url: http://localhost:8065
    container_network: mattermost_network
    github_repo: github.com/nmartins0611/mattermost_ansible.git
    backup_file: 3qxi3zh3h3rebrpunkg6949mqh_export.zip
    local_backup_path: /tmp/backup.zip
    config_file: config.json

  tasks:

    - name: Install Podman and dependencies
      dnf:
        name:
          - podman
          - python3-pip
          - python3-podman
          - git
          - unzip
        state: present
        update_cache: yes

    - name: Create SELinux directory context for container volumes
      sefcontext:
        target: "{{ item }}(/.*)?"
        setype: container_file_t
        state: present
      with_items:
        - "{{ mattermost_data_dir }}"
        - "{{ mattermost_config_dir }}"
        - "{{ mattermost_logs_dir }}"
        - "{{ mattermost_plugins_dir }}"
        - "{{ mattermost_client_plugins_dir }}"
        - "{{ mattermost_bleve_indexes_dir }}"
        - "{{ postgres_data_dir }}"
      register: sefcontext_result

    - name: Create Mattermost parent directory
      file:
        path: /opt/mattermost
        state: directory
        mode: '0755'

    - name: Run restorecon after changing SELinux context
      command: restorecon -Rv /opt/mattermost
      when: sefcontext_result.changed

    - name: Create Mattermost directories
      file:
        path: "{{ item }}"
        state: directory
        owner: 2000
        group: 2000
        mode: '0755'
      with_items:
        - "{{ mattermost_data_dir }}"
        - "{{ mattermost_config_dir }}"
        - "{{ mattermost_logs_dir }}"
        - "{{ mattermost_plugins_dir }}"
        - "{{ mattermost_client_plugins_dir }}"
        - "{{ mattermost_bleve_indexes_dir }}"
        - "{{ postgres_data_dir }}"

    - name: Create temporary directory for GitHub clone
      file:
        path: /tmp/mattermost_backup
        state: directory
        mode: '0755'

    - name: Clone GitHub repository to get backup file
      git:
        repo: "https://{{ github_repo }}"
        dest: /tmp/mattermost_backup
        force: yes

    - name: Copy backup file to local path
      copy:
        src: "/tmp/mattermost_backup/{{ backup_file }}"
        dest: "{{ local_backup_path }}"
        remote_src: yes
      register: backup_copied

    - name: Copy config
      copy:
        src: "/tmp/mattermost_backup/{{ config_file }}"
        dest: "{{ mattermost_config_dir }}"
        remote_src: yes

    - name: Create Podman network
      command: podman network create {{ container_network }}
      register: network_result
      failed_when: 
        - network_result.rc != 0 
        - "'already exists' not in network_result.stderr"
      changed_when: network_result.rc == 0

    - name: Deploy PostgreSQL container
      containers.podman.podman_container:
        name: mattermost-postgres
        image: docker.io/library/postgres:13
        restart_policy: always
        network: "{{ container_network }}"
        env:
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          POSTGRES_DB: "{{ postgres_db }}"
        volume:
          - "{{ postgres_data_dir }}:/var/lib/postgresql/data:Z"
        state: started

    - name: Wait for PostgreSQL to be ready
      pause:
        seconds: 30

    - name: Deploy Mattermost container
      containers.podman.podman_container:
        name: mattermost
        image: mattermost/mattermost-team-edition:{{ mattermost_version }}
        restart_policy: always
        network: "{{ container_network }}"
        ports:
          - "8065:8065"
        env:
          MM_USERNAME: "{{ postgres_user }}"
          MM_PASSWORD: "{{ postgres_password }}"
          MM_DBNAME: "{{ postgres_db }}"
          MM_SQLSETTINGS_DATASOURCE: "postgres://{{ postgres_user }}:{{ postgres_password }}@mattermost-postgres:5432/{{ postgres_db }}?sslmode=disable&connect_timeout=10"
          MM_SERVICESETTINGS_SITEURL: "{{ mm_site_url }}"
        volume:
          - "{{ mattermost_config_dir }}:/mattermost/config:Z"
          - "{{ mattermost_data_dir }}:/mattermost/data:Z"
          - "{{ mattermost_logs_dir }}:/mattermost/logs:Z"
          - "{{ mattermost_plugins_dir }}:/mattermost/plugins:Z"
          - "{{ mattermost_client_plugins_dir }}:/mattermost/client/plugins:Z"
          - "{{ mattermost_bleve_indexes_dir }}:/mattermost/bleve-indexes:Z"
        state: started

    - name: Wait for Mattermost to be ready
      pause:
        seconds: 60

    - name: Copy backup file into Mattermost container
      command: >
        podman cp {{ local_backup_path }} mattermost:/tmp/backup.zip
      when: backup_copied.changed

    # - name: Import Mattermost backup
    #   command: >
    #     podman exec mmctl auth login http://localhost:8065 --name local-instance --username admin --password your-password && mmctl import upload /tmp/backup.zip
    #   register: import_result
    #   when: backup_copied.changed

    # - name: Check if firewalld is running
    #   command: systemctl is-active firewalld
    #   register: firewalld_status
    #   failed_when: false
    #   changed_when: false

    - name: Configure firewalld for Mattermost
      firewalld:
        port: 8065/tcp
        permanent: yes
        state: enabled
        immediate: yes
      when: firewalld_status.stdout == "active"
